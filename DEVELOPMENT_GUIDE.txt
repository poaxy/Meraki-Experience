Meraki Experience Extension - Developer Guide
============================================

Overview
--------
This document is intended for developers working on the Meraki Experience browser extension. It explains the project structure, best practices for adding new features, and important considerations to ensure code quality, feature isolation, and UI consistency.

Directory Structure
-------------------
- src/
  - background.js      # Handles background tasks, extension state, and messaging
  - content.js         # Injected into Meraki sites, implements main features
  - popup/
    - popup.html       # Extension popup UI
    - popup.js         # Popup logic and event handling
    - popup.css        # Popup styles
  - assets/            # Icons and images used by the extension
- manifest.json        # Extension manifest
- DEVELOPMENT_GUIDE.txt# This file

Feature Design Principles
------------------------
1. **Feature Isolation**
   - Each feature should be scoped to a specific site or context (e.g., dashboard, documentation).
   - Use clear, separate toggles for each feature in both the popup and the code.
   - Avoid global side effects; only modify the DOM or browser state relevant to your feature.

2. **State Management**
   - Use `chrome.storage.sync` for feature toggles and settings.
   - Always provide sensible defaults for new settings (see how `enableCopyLink` and `enableGreenFavicon` are handled).
   - When adding a new toggle, update both the popup UI and the content/background scripts to read and react to the new setting.

3. **Messaging**
   - Use `chrome.runtime.sendMessage` and `chrome.runtime.onMessage` for communication between popup, background, and content scripts.
   - Use clear message types (e.g., `ENABLE_NEW_FEATURE`) and handle them in a dedicated section of the content script.

4. **UI Consistency**
   - Follow the existing markup and CSS conventions in `popup.html` and `popup.css`.
   - For new toggle labels, use a unique ID and add it to the CSS selector for label styles (see `#device-name-label, #copy-link-label, #favicon-label`).
   - Use the same row structure and switch classes for new toggles.
   - Test in both light and dark themes.

5. **Avoiding Feature Overlap**
   - Before adding a new feature, check if it could affect the same DOM elements or browser state as an existing feature.
   - Scope DOM queries and mutations to specific containers or selectors.
   - If a feature is only relevant on certain pages, use helper functions like `isDocs()` or `isNDashboard()` to guard your logic.
   - Use feature flags (toggles) to ensure features can be independently enabled/disabled.

6. **Performance**
   - Be mindful of MutationObservers and event listeners; avoid unnecessary re-runs or DOM changes.
   - Clean up injected elements or listeners when features are disabled.

7. **Accessibility & Semantics**
   - Use proper ARIA labels and roles for new UI elements.
   - Avoid duplicate IDs in the HTML.

Adding a New Feature - Checklist
-------------------------------
- [ ] Add a new toggle to the popup UI (HTML, JS, CSS).
- [ ] Store the toggle state in `chrome.storage.sync` with a sensible default.
- [ ] Update the content script to read the new setting and implement the feature logic.
- [ ] Use site/context checks to avoid running the feature where it doesn't belong.
- [ ] Add message handling for the new feature if it needs to react to popup changes.
- [ ] Update CSS selectors for label consistency if adding a new label.
- [ ] Test enabling/disabling the feature and check for side effects on other features.
- [ ] Test the popup UI in both light and dark themes.

Other Important Notes
--------------------
- Keep code modular and functions small.
- Use console logging for debugging, but remove or minimize logs in production.
- Document any non-obvious logic in comments.
- Review the latest code for recent changes before starting work.

For questions or to propose major changes, please open an issue or discuss with the maintainers. 